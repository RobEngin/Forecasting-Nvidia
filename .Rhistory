} else if (length_pred_real > length_test_y) {
pred_real <- pred_real[1:length_test_y]
}
# Creazione di un dataframe per il plot
df <- data.frame(
Date = time(test_y),
Actual = test_y,
Forecast = pred_real
)
# Plot
ggplot(df, aes(x = Date)) +
geom_line(aes(y = Actual, color = "Actual")) +
geom_line(aes(y = Forecast, color = "Forecast")) +
labs(title = "ARIMAX Model Forecast vs Actual",
x = "Time",
y = "Revenue (in billion)",
color = "Legend") +
theme_minimal()
# Visualizzazione delle previsioni insieme ai dati reali
plot(forecast_arimax, main = "Forecast vs Actual Revenue", xlab = "Time", ylab = "Revenue (Billion)", xlim = c(0,25), ylim = c(-2.5, 2))
lines(diff(ts_revenue), col = "black")
lines(forecast_arimax$mean, col = "blue", type = "o")
legend("topleft", legend = c("Actual", "Forecast"), col = c("black", "blue"), lty = 1, pch = 1)
# Ultimo valore osservato nella serie non differenziata di addestramento
last_train_value <- tail(train_y, 1)
# Previsioni differenziate
pred_diff <- forecast_arimax$mean
# Inversione della differenziazione delle previsioni
pred_real <- cumsum(c(last_train_value, pred_diff))[-1]
# Calcola i residui sui dati non differenziati
residuals <- test_y - pred_real
# Calcola le metriche di errore sui residui non differenziati
me <- mean(residuals)
rmse <- sqrt(mean(residuals^2))
mae <- mean(abs(residuals))
mpe <- mean((residuals / test_y) * 100)
mape <- mean(abs(residuals / test_y) * 100)
# Stampa le metriche di errore
cat("Mean Error (ME):", me, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("Mean Percentage Error (MPE):", mpe, "%\n")
cat("Mean Absolute Percentage Error (MAPE):", mape, "%\n")
# Converti train_x e test_x in matrici numeriche
train_x_matrix <- as.matrix(train_x_diff)
test_x_matrix <- as.matrix(test_x_diff)
# Adattamento del modello ARIMAX sui dati di addestramento
arimax_model <- Arima(diff(train_y), order = c(0,1,1), xreg = train_x_matrix)
# Sommario del modello ARIMAX
summary(arimax_model)
checkresiduals(arimax_model)
# Previsione del modello ARIMAX sui dati di test
forecast_arimax <- forecast(arimax_model, xreg = test_x_matrix, h = nrow(test_x_matrix))
last_value <- tail(train_y, 1)
pred_diff <- forecast_arimax$mean
pred_real <- cumsum(c(last_value, pred_diff))[-1]
# Verifica della lunghezza delle serie temporali
length_test_y <- length(test_y)
length_pred_real <- length(pred_real)
# Aggiusta la lunghezza della serie di previsione se necessario
if (length_test_y > length_pred_real) {
pred_real <- c(pred_real, rep(NA, length_test_y - length_pred_real))
} else if (length_pred_real > length_test_y) {
pred_real <- pred_real[1:length_test_y]
}
# Creazione di un dataframe per il plot
df <- data.frame(
Date = time(test_y),
Actual = test_y,
Forecast = pred_real
)
# Plot
ggplot(df, aes(x = Date)) +
geom_line(aes(y = Actual, color = "Actual")) +
geom_line(aes(y = Forecast, color = "Forecast")) +
labs(title = "ARIMAX Model Forecast vs Actual",
x = "Time",
y = "Revenue (in billion)",
color = "Legend") +
theme_minimal()
# Converti train_x e test_x in matrici numeriche
train_x_matrix <- as.matrix(train_x_diff)
test_x_matrix <- as.matrix(test_x_diff)
# Adattamento del modello ARIMAX sui dati di addestramento
arimax_model <- Arima(diff(train_y), order = c(1,1,1), xreg = train_x_matrix)
# Sommario del modello ARIMAX
summary(arimax_model)
checkresiduals(arimax_model)
# Previsione del modello ARIMAX sui dati di test
forecast_arimax <- forecast(arimax_model, xreg = test_x_matrix, h = nrow(test_x_matrix))
last_value <- tail(train_y, 1)
pred_diff <- forecast_arimax$mean
pred_real <- cumsum(c(last_value, pred_diff))[-1]
# Verifica della lunghezza delle serie temporali
length_test_y <- length(test_y)
length_pred_real <- length(pred_real)
# Aggiusta la lunghezza della serie di previsione se necessario
if (length_test_y > length_pred_real) {
pred_real <- c(pred_real, rep(NA, length_test_y - length_pred_real))
} else if (length_pred_real > length_test_y) {
pred_real <- pred_real[1:length_test_y]
}
# Creazione di un dataframe per il plot
df <- data.frame(
Date = time(test_y),
Actual = test_y,
Forecast = pred_real
)
# Plot
ggplot(df, aes(x = Date)) +
geom_line(aes(y = Actual, color = "Actual")) +
geom_line(aes(y = Forecast, color = "Forecast")) +
labs(title = "ARIMAX Model Forecast vs Actual",
x = "Time",
y = "Revenue (in billion)",
color = "Legend") +
theme_minimal()
# Converti train_x e test_x in matrici numeriche
train_x_matrix <- as.matrix(train_x_diff)
test_x_matrix <- as.matrix(test_x_diff)
# Adattamento del modello ARIMAX sui dati di addestramento
arimax_model <- Arima(diff(train_y), order = c(0,0,0), xreg = train_x_matrix)
# Sommario del modello ARIMAX
summary(arimax_model)
checkresiduals(arimax_model)
# Previsione del modello ARIMAX sui dati di test
forecast_arimax <- forecast(arimax_model, xreg = test_x_matrix, h = nrow(test_x_matrix))
last_value <- tail(train_y, 1)
pred_diff <- forecast_arimax$mean
pred_real <- cumsum(c(last_value, pred_diff))[-1]
# Verifica della lunghezza delle serie temporali
length_test_y <- length(test_y)
length_pred_real <- length(pred_real)
# Aggiusta la lunghezza della serie di previsione se necessario
if (length_test_y > length_pred_real) {
pred_real <- c(pred_real, rep(NA, length_test_y - length_pred_real))
} else if (length_pred_real > length_test_y) {
pred_real <- pred_real[1:length_test_y]
}
# Creazione di un dataframe per il plot
df <- data.frame(
Date = time(test_y),
Actual = test_y,
Forecast = pred_real
)
# Plot
ggplot(df, aes(x = Date)) +
geom_line(aes(y = Actual, color = "Actual")) +
geom_line(aes(y = Forecast, color = "Forecast")) +
labs(title = "ARIMAX Model Forecast vs Actual",
x = "Time",
y = "Revenue (in billion)",
color = "Legend") +
theme_minimal()
# Converti train_x e test_x in matrici numeriche
train_x_matrix <- as.matrix(train_x_diff)
test_x_matrix <- as.matrix(test_x_diff)
# Adattamento del modello ARIMAX sui dati di addestramento
arimax_model <- Arima(diff(train_y), order = c(0,0,1), xreg = train_x_matrix)
# Sommario del modello ARIMAX
summary(arimax_model)
checkresiduals(arimax_model)
# Previsione del modello ARIMAX sui dati di test
forecast_arimax <- forecast(arimax_model, xreg = test_x_matrix, h = nrow(test_x_matrix))
last_value <- tail(train_y, 1)
pred_diff <- forecast_arimax$mean
pred_real <- cumsum(c(last_value, pred_diff))[-1]
# Verifica della lunghezza delle serie temporali
length_test_y <- length(test_y)
length_pred_real <- length(pred_real)
# Aggiusta la lunghezza della serie di previsione se necessario
if (length_test_y > length_pred_real) {
pred_real <- c(pred_real, rep(NA, length_test_y - length_pred_real))
} else if (length_pred_real > length_test_y) {
pred_real <- pred_real[1:length_test_y]
}
# Creazione di un dataframe per il plot
df <- data.frame(
Date = time(test_y),
Actual = test_y,
Forecast = pred_real
)
# Plot
ggplot(df, aes(x = Date)) +
geom_line(aes(y = Actual, color = "Actual")) +
geom_line(aes(y = Forecast, color = "Forecast")) +
labs(title = "ARIMAX Model Forecast vs Actual",
x = "Time",
y = "Revenue (in billion)",
color = "Legend") +
theme_minimal()
# Visualizzazione delle previsioni insieme ai dati reali
plot(forecast_arimax, main = "Forecast vs Actual Revenue", xlab = "Time", ylab = "Revenue (Billion)", xlim = c(0,25), ylim = c(-2.5, 2))
lines(diff(ts_revenue), col = "black")
lines(forecast_arimax$mean, col = "blue", type = "o")
legend("topleft", legend = c("Actual", "Forecast"), col = c("black", "blue"), lty = 1, pch = 1)
# Ultimo valore osservato nella serie non differenziata di addestramento
last_train_value <- tail(train_y, 1)
# Previsioni differenziate
pred_diff <- forecast_arimax$mean
# Inversione della differenziazione delle previsioni
pred_real <- cumsum(c(last_train_value, pred_diff))[-1]
# Calcola i residui sui dati non differenziati
residuals <- test_y - pred_real
# Calcola le metriche di errore sui residui non differenziati
me <- mean(residuals)
rmse <- sqrt(mean(residuals^2))
mae <- mean(abs(residuals))
mpe <- mean((residuals / test_y) * 100)
mape <- mean(abs(residuals / test_y) * 100)
# Stampa le metriche di errore
cat("Mean Error (ME):", me, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("Mean Percentage Error (MPE):", mpe, "%\n")
cat("Mean Absolute Percentage Error (MAPE):", mape, "%\n")
library(car)
library(readxl)
library(dplyr)
library(lubridate)
library(forecast)
library(ggplot2)
number_of_employees <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/number-of-employees.xlsx")
number_of_employees_2 <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/NVIDIA_Employees_Data.xlsx")
rd_spending <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/research-development-spending.xlsx")
quarterly_net_income <- read.csv("~/Desktop/Unipd/GitHub/Business-Project/Business Project/net_income_csv.csv")
revenue_by_quarter <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/revenue-by-quarter.xlsx")
revenue_by_quarter_2 <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/New_Data_2.xlsx")
revenue_by_segment <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/revenue-by-segment.xlsx")
nvda_stock <- read.csv("~/Desktop/Unipd/GitHub/Business-Project/Business Project/NVDA.csv")
#plot with ggplot2 quarterly_net_income x from 1 to len df
#reverse Quarter Value Year
quarterly_net_income <- data.frame(quarter = rev(quarterly_net_income$Quarter), Value = rev(quarterly_net_income$Value), Year = rev(quarterly_net_income$Year))
#delete last 2 rowns of the dataframe
quarterly_net_income <- quarterly_net_income[-c((nrow(quarterly_net_income)-1):nrow(quarterly_net_income)),]
ggplot(quarterly_net_income, aes(x = 1:nrow(quarterly_net_income), y = Value, group = 1)) +
geom_line() +
geom_point() +
labs(title = "Quarterly Net Income", x = "Index", y = "Net Income (Billion)") +
theme_minimal()
nvda_stock <- nvda_stock %>% mutate(Price = (Open + Adj.Close) / 2)
nvda_stock <- nvda_stock %>% select(Date, Price)
nvda_stock$Date <- as.Date(nvda_stock$Date, format="%Y-%m-%d")
nvda_stock <- nvda_stock %>%
mutate(Year = year(Date),
Quarter = quarter(Date))
quarterly_data <- nvda_stock %>%
group_by(Year, Quarter) %>%
summarise(Average_Price = mean(Price, na.rm = TRUE)) %>%
ungroup()
head(nvda_stock)
head(quarterly_data)
#assigning the quarterly data to nvda_stock
nvda_stock <- quarterly_data
nvda_stock <- nvda_stock %>% mutate(quarter = rep(c("Q1", "Q2", "Q3", "Q4"), length.out = nrow(nvda_stock)))
ggplot(quarterly_data, aes(x = paste(Year, Quarter, sep = "-Q"), y = Average_Price, group = 1)) +
geom_line() +
geom_point() +
labs(title = "Average Price per Quarter", x = "Year-Quarter", y = "Average Price") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(quarterly_data, aes(x = paste(Year, Quarter, sep = "-Q"), y = log(Average_Price), group = 1)) +
geom_line() +
geom_point() +
labs(title = "Average Price per Quarter", x = "Year-Quarter", y = "Average Price") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
nvda_stock <- nvda_stock %>% select(Year, 'Average_Price', quarter) %>% rename(Price = 'Average_Price')
print(colnames(number_of_employees))
print(sapply(number_of_employees, class))
print(nrow(number_of_employees))
print(colnames(number_of_employees_2))
print(sapply(number_of_employees_2, class))
print(nrow(number_of_employees_2))
print(colnames(revenue_by_quarter))
print(sapply(revenue_by_quarter, class))
print(nrow(revenue_by_quarter))
print(colnames(revenue_by_quarter_2))
print(sapply(revenue_by_quarter_2, class))
print(nrow(revenue_by_quarter_2))
print(colnames(rd_spending))
print(sapply(rd_spending, class))
print(nrow(rd_spending))
print(colnames(quarterly_net_income))
print(sapply(quarterly_net_income, class))
print(nrow(quarterly_net_income))
print(colnames(nvda_stock))
print(sapply(nvda_stock, class))
print(nrow(nvda_stock))
# Normalizzare i dati
normalize <- function(x) {
return((x - mean(x)) / sd(x))
}
# Ripetere i valori annuali per ciascuno dei quattro trimestri
repeat_annual_data <- function(annual_data) {
return(rep(annual_data, each = 4))
}
plot_model_forecast <- function(model, data, forecast_horizon) {
forecasted_values <- forecast(model, h = forecast_horizon)
plot(forecasted_values, ylab = "Billion", xlab = "Time")
lines(fitted(model), col = 2)
}
#print every firsst value of the dataframes (columns 'Date')
print(head(number_of_employees_2$Date, 1))
print(head(rd_spending$year, 1))
print(head(quarterly_net_income$Year, 1))
print(head(revenue_by_quarter$quarter, 1))
print(head(revenue_by_quarter_2$Date, 1))
print(head(nvda_stock$Year, 1))
#fix revenue_by_quarter_2
#delete last 4 rows of the dataframe revenue_by_quarter_2
revenue_by_quarter_2 <- revenue_by_quarter_2[-c((nrow(revenue_by_quarter_2)-3):nrow(revenue_by_quarter_2)),]
#reverse all revenue_by_quarter_2 columns values (Revenue and Date)
revenue_by_quarter_2 <- data.frame(Revenue = rev(revenue_by_quarter_2$Revenue), Date = rev(revenue_by_quarter_2$Date))
#add Q1 Q2 Q3 Q4 to a new column Quarter
revenue_by_quarter_2 <- revenue_by_quarter_2 %>%
mutate(Quarter = rep(c("Q1", "Q2", "Q3", "Q4"), length.out = nrow(revenue_by_quarter_2)))
#add column Year with reapeted values from 1999 to 2024 (every year 4 times)
revenue_by_quarter_2 <- revenue_by_quarter_2 %>%
mutate(Year = rep(1999:2024, each = 4, length.out = nrow(revenue_by_quarter_2)))
#delete column "Date" from the dataframe
revenue_by_quarter_2 <- revenue_by_quarter_2 %>% select(-Date)
#fix rd_spending
# Carica i pacchetti necessari
library(splines)
# Dati annuali
anni <- rd_spending$year
valori_annuali <- rd_spending$billion / 1000
# Definizione dei punti trimestrali
punti_trimestrali <- seq(2005, 2023, by = 0.25)
# Interpolazione cubica
spline_fit <- spline(anni, valori_annuali, xout = punti_trimestrali, method = "natural")
# Creazione di un data frame per visualizzare i risultati
df_trimestrale <- data.frame(Anno_Trimestre = spline_fit$x, Valore = spline_fit$y)
rd_spending <- df_trimestrale
#add a column year from 2005 to 2023 repeated 4 times for each year
rd_spending <- rd_spending %>%
mutate(year = rep(2005:2023, each = 4, length.out = nrow(rd_spending)))
#add a column quarter with values Q1 Q2 Q3 Q4 each repeated 4 times for each year
rd_spending <- rd_spending %>%
mutate(quarter = rep(c("Q1", "Q2", "Q3", "Q4"), length.out = nrow(rd_spending)))
#delete column Annno_Trimestre
rd_spending <- rd_spending %>% select(-Anno_Trimestre)
# Mostra i risultati
print(rd_spending)
#plot with ggplot2 rd_spending x from 1 to len df
ggplot(rd_spending, aes(x = 1:nrow(rd_spending), y = Valore, group = 1)) +
geom_line() +
geom_point() +
labs(title = "Research & Development Spending", x = "Index", y = "Spending (Billion)") +
theme_minimal()
ggplot(rd_spending, aes(x = year, y = Valore, group = 1)) +
geom_line() +
geom_point() +
labs(title = "Research & Development Spending", x = "Index", y = "Spending (Billion)") +
theme_minimal()
#delete last 2 rows of the dataframe number_of_employees_2
number_of_employees_2 <- number_of_employees_2[-c((nrow(number_of_employees_2)-1):nrow(number_of_employees_2)),]
#delete Change and Growth columns
number_of_employees_2 <- number_of_employees_2 %>% select(-Change, -'Growth (%)')
#reverse all number_of_employees_2 columns values (Numbers of Emplyees and Date)
number_of_employees_2 <- data.frame(Values = rev(number_of_employees_2$'Number of Employees'), Date = rev(number_of_employees_2$Date))
#add a clumn year from 1999 to 2024 not repeated call it Year
number_of_employees_2 <- number_of_employees_2 %>%
mutate(year = rep(1999:2024, length.out = nrow(number_of_employees_2)))
# Dati annuali
anni <- number_of_employees_2$year
valori_annuali <- number_of_employees_2$Values
# Definizione dei punti trimestrali
punti_trimestrali <- seq(1999, 2024, by = 0.25)
# Interpolazione cubica
spline_fit <- spline(anni, valori_annuali, xout = punti_trimestrali, method = "natural")
# Creazione di un data frame per visualizzare i risultati
df_trimestrale <- data.frame(Anno_Trimestre = spline_fit$x, Valore = spline_fit$y)
number_of_employees_2 <- df_trimestrale
#add a column year from 1999 to 2024 repeated 4 times for each year
number_of_employees_2 <- number_of_employees_2 %>%
mutate(year = rep(1999:2024, each = 4, length.out = nrow(number_of_employees_2)))
#add a column quarter with values Q1 Q2 Q3 Q4 each repeated 4 times for each year
number_of_employees_2 <- number_of_employees_2 %>%
mutate(quarter = rep(c("Q1", "Q2", "Q3", "Q4"), length.out = nrow(number_of_employees_2)))
#drop column Anno_Trimestre
number_of_employees_2 <- number_of_employees_2 %>% select(-Anno_Trimestre)
#plot with ggplot2 number_of_employees_2 x from 1 to len df
ggplot(number_of_employees_2, aes(x = 1:nrow(number_of_employees_2), y = Valore, group = 1)) +
geom_line() +
geom_point() +
labs(title = "Number of Employees", x = "Index", y = "Number of Employees") +
theme_minimal()
#plot with ggplot2 number_of_employees_2 per year
ggplot(number_of_employees_2, aes(x = year, y = Valore, group = 1)) +
geom_line() +
geom_point() +
labs(title = "Number of Employees", x = "Year", y = "Number of Employees") +
theme_minimal()
# Carica i pacchetti necessari
if(!require(tidyverse)) install.packages("tidyverse")
# Supponiamo che rd_spending sia già definito nel tuo ambiente di lavoro
# Crea df per poly
df <- rd_spending %>% select(Valore)
# Reverti l'ordine del df
df <- rev(df$Valore)
# Trasforma il df in un dataframe con colonne chiamate Valore e time
df <- data.frame(Valore = df)
df$time <- 1:nrow(df)
# Crea un modello di regressione spline
model <- lm(Valore ~ ns(time, df = 1), data = df) # ns = natural splines, df = gradi di libertà
# Numero di punti da predire (ad esempio, 24 punti all'indietro)
n_pred <- 24
# Creazione di un dataframe per la predizione
new_data <- data.frame(time = nrow(df) + 1:n_pred)
# Predizione dei valori
predicted_values <- predict(model, newdata = new_data)
# Assicurati che i valori predetti non siano minori di zero
predicted_values <- pmax(predicted_values, 0)
# Aggiungi i valori predetti al dataframe
new_data$Valore <- predicted_values
# Mostra i valori predetti
print(new_data)
#aggiunge colonne year da 1999 al 2004 a new_data repeated 4 times for each year and a column quarter with values Q1 Q2 Q3 Q4 repeated 4 times for each year
new_data <- new_data %>%
mutate(year = rep(1999:2004, each = 4, length.out = nrow(new_data)))
new_data <- new_data %>% mutate(quarter = rep(c("Q1", "Q2", "Q3", "Q4"), length.out = nrow(new_data)))
#drop column 'time'
new_data <- new_data %>% select(-time)
#reverse all new_data columns values (Valore, year, quarter)
new_data <- data.frame(Valore = rev(new_data$Valore), year = new_data$year, quarter = new_data$quarter)
rd_spending <- rbind(new_data, rd_spending)
#plot with ggplot2 rd_spending x from 1 to len df
ggplot(rd_spending, aes(x = 1:nrow(rd_spending), y = Valore, group = 1)) +
geom_line() +
geom_point() +
labs(title = "Research & Development Spending", x = "Index", y = "Spending (Billion)") +
theme_minimal()
#print every firsst value of the dataframes (columns 'Date')
print(head(number_of_employees_2$year, 1))
print(head(rd_spending$year, 1))
print(head(quarterly_net_income$Year, 1))
print(head(revenue_by_quarter_2$Year, 1))
print(head(nvda_stock$Year, 1))
print(head(number_of_employees_2$quarter, 1))
print(head(rd_spending$quarter, 1))
print(head(quarterly_net_income$quarter, 1))
print(head(revenue_by_quarter_2$Quarter, 1))
print(head(nvda_stock$quarter, 1))
#print every firsst value of the dataframes (columns 'Date')
print(tail(number_of_employees_2$year, 1))
print(tail(rd_spending$year, 1))
print(tail(quarterly_net_income$Year, 1))
print(tail(revenue_by_quarter_2$Year, 1))
print(tail(nvda_stock$Year, 1))
print(tail(number_of_employees_2$quarter, 1))
print(tail(rd_spending$quarter, 1))
print(tail(quarterly_net_income$quarter, 1))
print(tail(revenue_by_quarter_2$Quarter, 1))
print(tail(nvda_stock$quarter, 1))
number_of_employees <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/number-of-employees.xlsx")
number_of_employees_2 <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/NVIDIA_Employees_Data.xlsx")
rd_spending <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/research-development-spending.xlsx")
quarterly_net_income <- read.csv("~/Desktop/Unipd/GitHub/Business-Project/Business Project/net_income_csv.csv")
revenue_by_quarter <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/revenue-by-quarter.xlsx")
revenue_by_quarter_2 <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/New_Data_2.xlsx")
revenue_by_segment <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/revenue-by-segment.xlsx")
nvda_stock <- read.csv("~/Desktop/Unipd/GitHub/Business-Project/Business Project/NVDA.csv")
#print every firsst value of the dataframes (columns 'Date')
print(head(number_of_employees_2$year, 1))
print(head(rd_spending$year, 1))
print(head(quarterly_net_income$Year, 1))
print(head(revenue_by_quarter_2$Year, 1))
print(head(nvda_stock$Year, 1))
print(head(number_of_employees_2$quarter, 1))
print(head(rd_spending$quarter, 1))
print(head(quarterly_net_income$quarter, 1))
print(head(revenue_by_quarter_2$Quarter, 1))
print(head(nvda_stock$quarter, 1))
#print every firsst value of the dataframes (columns 'Date')
print(tail(number_of_employees_2$year, 1))
print(tail(rd_spending$year, 1))
print(tail(quarterly_net_income$Year, 1))
print(tail(revenue_by_quarter_2$Year, 1))
print(tail(nvda_stock$Year, 1))
print(tail(number_of_employees_2$quarter, 1))
print(tail(rd_spending$quarter, 1))
print(tail(quarterly_net_income$quarter, 1))
print(tail(revenue_by_quarter_2$Quarter, 1))
print(tail(nvda_stock$quarter, 1))
View(revenue_by_quarter_2)
View(number_of_employees_2)
View(number_of_employees_2)
View(rd_spending)
View(nvda_stock)
View(nvda_stock)
View(quarterly_net_income)
number_of_employees <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/number-of-employees.xlsx")
number_of_employees_2 <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/NVIDIA_Employees_Data.xlsx")
rd_spending <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/research-development-spending.xlsx")
quarterly_net_income <- read.csv("~/Desktop/Unipd/GitHub/Business-Project/Business Project/net_income_csv.csv")
revenue_by_quarter <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/revenue-by-quarter.xlsx")
revenue_by_quarter_2 <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/New_Data_2.xlsx")
revenue_by_segment <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/revenue-by-segment.xlsx")
nvda_stock <- read.csv("~/Desktop/Unipd/GitHub/Business-Project/Business Project/NVDA.csv")
View(rd_spending)
number_of_employees <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/number-of-employees.xlsx")
number_of_employees_2 <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/NVIDIA_Employees_Data.xlsx")
rd_spending <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/research-development-spending.xlsx")
quarterly_net_income <- read.csv("~/Desktop/Unipd/GitHub/Business-Project/Business Project/net_income_csv.csv")
revenue_by_quarter <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/revenue-by-quarter.xlsx")
revenue_by_quarter_2 <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/New_Data_2.xlsx")
revenue_by_segment <- read_excel("~/Desktop/Unipd/GitHub/Business-Project/Business Project/revenue-by-segment.xlsx")
nvda_stock <- read.csv("~/Desktop/Unipd/GitHub/Business-Project/Business Project/NVDA.csv")
View(rd_spending)
View(number_of_employees_2)
View(number_of_employees)
View(number_of_employees_2)
